<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace Uno.Extensions;

/// <summary>
/// Encapsulates an asynchronous method that has no parameters and returns a value of the type specified by the <typeparamref name="TResult"/> parameter.
/// </summary>
/// <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
/// <param name="ct">A cancellation to cancel the async operation.</param>
/// <returns>The return value of the method that this delegate encapsulates.</returns>
public delegate ValueTask<TResult> AsyncFunc<TResult>(CancellationToken ct);

/// <summary>
/// Encapsulates an asynchronous method that has one parameter and returns a value of the type specified by the <typeparamref name="TResult"/> parameter.
/// </summary>
/// <typeparam name="T">
/// The type of the parameter of the method that this delegate encapsulates.
/// This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived.
/// </typeparam>
/// <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
/// <param name="arg">The parameter of the method that this delegate encapsulates.</param>
/// <param name="ct">A cancellation to cancel the async operation.</param>
/// <returns>The return value of the method that this delegate encapsulates.</returns>
public delegate ValueTask<TResult> AsyncFunc<in T, TResult>(T arg, CancellationToken ct);
<#

for (var typeArgsCount = 2; typeArgsCount <= 16; typeArgsCount++)
{
	string Repeat(string format)
		=> string.Join(", ", Enumerable.Range(1, typeArgsCount).Select(i => string.Format(format, i)));

	string RepeatLine(string format)
		=> string.Join("\r\n", Enumerable.Range(1, typeArgsCount).Select(i => string.Format(format.Trim(), i)));

#>

/// <summary>
/// Encapsulates an asynchronous method that has <#= typeArgsCount #> parameters and returns a value of the type specified by the <typeparamref name="TResult"/> parameter.
/// </summary>
<#= RepeatLine(@"
/// <typeparam name=""T{0}"">
/// The type of the parameter #{0} of the method that this delegate encapsulates.
/// This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived.
/// </typeparam>
") #>
/// <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
<#= RepeatLine(@"
/// <param name=""arg{0}"">The parameter #{0} of the method that this delegate encapsulates.</param>
") #>
/// <param name="ct">A cancellation to cancel the async operation.</param>
/// <returns>The return value of the method that this delegate encapsulates.</returns>
public delegate ValueTask<TResult> AsyncFunc<<#= Repeat("in T{0}") #>, TResult>(<#= Repeat("T{0} arg{0}") #>, CancellationToken ct);
<# } #>
